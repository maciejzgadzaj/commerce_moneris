<?php
/**
 * @file
 * Provides moneris payment method for Drupal Commerce
 *   
 */
 
 /**
 * Implement hook_permission().
 */
function commerce_moneris_permission() {
  return array(
    'administer moneris' => array(
      'title' => t('Administer Moneris'),
      'description' => t('Perform administrative actions with Moneris.'),
    ),  
  );
}
 
/**
 * Implements hook_menu().
 */
function commerce_moneris_menu() {
  $items = array();
  
  $items['admin/commerce/config/payment-methods/manage/commerce_payment_commerce_moneris'] = array(
    'title' => 'Moneris',
    'description' => 'Provides configuration options for the Moneris payment api.',
    'access arguments' => array('administer moneris'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_moneris_admin_settings'),
    'file' => 'commerce_moneris.admin.inc',
  );
  
  return $items;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_moneris_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_moneris'] = array(
    'title' => t('Moneris'),
    'description' => t('Moneris Payment'),
    'active' => TRUE,
  );

  return $payment_methods;
}

/**
 * Payment method callback: checkout form.
 */
function commerce_moneris_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form = array();
  
  $form['moneris_credit_card']['number'] = array(
    '#type' => 'textfield', 
    '#title' => t('Credit Card Number'), 
		'#description' => t('Your credit card number.'), 		
    '#required' => TRUE, 
  	'#default_value' => $pane_values['cc']
  );
  
  $form['moneris_credit_card']['exp_month'] = array(    
    '#type' => 'select',    
  	'#title' =>  t('Expiration Month'), 
    '#options' => commerce_months(), 
    '#required' => TRUE, 
    '#default_value' => $pane_values['month'], 
    '#description' => t('Your credit card expiration month.')
  );
    
  $form['moneris_credit_card']['exp_year'] = array(
    '#type' => 'select', 
    '#title' => t('Expiration Year'), 
    '#options' => drupal_map_assoc(range(date('Y') - 2, date('Y') + 10)), 
    '#required' => TRUE, 
  	'#default_value' => $pane_values['year'], 
    '#description' => t('Your credit card expiration year.')
  );
  
  $form['moneris_credit_card']['cvd_value'] = array(
    '#type' => 'textfield', 
    '#title' => t('CVD'), 
    '#required' => TRUE, 
    '#description' => t('Last 3 or 4 digits on the back of your credit card.'), 
  	'#default_value' => $pane_values['cvd']
  );
    
  return $form;
}

/**
 * Payment method callback: checkout form submission.
 */
function commerce_moneris_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  $order->data['commerce_moneris'] = $pane_values;    
  return commerce_moneris_transaction($payment_method, $order, $charge, $pane_values);
}

/**
 * Creates a moneris payment transaction. Post data to moneris.
 *
 * @param $payment_method
 *   The payment method instance object used to charge this payment.
 * @param $order
 *   The order object the payment applies to.
 * @param $charge
 *   An array indicating the amount and currency code to charge.
 * @param $name
 *   The name entered on the submission form.
 */
function commerce_moneris_transaction($payment_method, $order, $charge, $values) {
  $transaction = commerce_payment_transaction_new('commerce_moneris', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];

  // include the class based on gateway
  $gateway = variable_get('commerce_moneris_gateway', 'ca');
  $class_path = drupal_get_path('module', 'commerce_moneris') . "/classes/mpgClasses_$gateway.php"; 
  
  require_once DRUPAL_ROOT . '/' . $class_path;
  $monGlobs = new mpgGlobals();
  
  $store_id = variable_get('commerce_moneris_store_id', '');
  $api_token = variable_get('commerce_moneris_apitoken', '');
    
  // prepare data  
  $amount = number_format($charge['amount']/100, 2, '.', '');
  $pan = $order->data['commerce_moneris']['moneris_credit_card']['number'];
  $expiry_date = substr($order->data['commerce_moneris']['moneris_credit_card']['exp_year'], 2, 2) . $order->data['commerce_moneris']['moneris_credit_card']['exp_month'];  
  $cvd = $order->data['commerce_moneris']['moneris_credit_card']['cvd_value'];

  $order_id = 'order-' . $order->order_id;
  $cust_id = 'customer-' . $order->uid;
  
  // transaction data  
  $purchase_type = $gateway == 'ca' ? 'purchase' : 'us_purchase';
  $txnArray = array(
    'type' => $purchase_type,
    'order_id' => $order_id,
    'cust_id' => $cust_id, 
    'amount' => $amount,
    'pan' => $pan,    
    'expdate' => $expiry_date, 
    'crypt_type' => '7',
    'cvd_value' => $cvd,
    'cvd_indicator' => 1
  );
    
  // allow other modules to alter the txnArray
  drupal_alter('commerce_moneris_txnarray', $txnArray, $order);
      
  // create the transaction object and do the POST to Moneris
  $mpgTxn = new mpgTransaction($txnArray);
  $mpgRequest = new mpgRequest($mpgTxn);
  $mpgHttpPost = new mpgHttpsPost($store_id, $api_token, $mpgRequest);
  $mpgResponse = $mpgHttpPost->getMpgResponse();
  
  watchdog('commerce_moneris', 'Moneris transaction response: !param', array('!param' => '<pre>' . check_plain(print_r($mpgResponse->responseData, TRUE)) . '</pre>'));
  
  $transaction->message = 'Moneris ResponseCode: @responsecode <br />
  												 Moneris ResponseMessage: @message';
  
  $transaction->message_variables = array(
  	'@responsecode' => $mpgResponse->getResponseCode(), 
  	'@message' => $mpgResponse->getMessage()    
  );

  $response_code = $mpgResponse->getResponseCode();
     
  if ($response_code != "null") {
    $response_code = intval($response_code);
    if ( (0 <= $response_code) && ($response_code <= 49)) {
      $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
      $payment_approved = TRUE;
    }
    else {
      $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
      $payment_approved = FALSE;
    }    
  }
  else {
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
    $payment_approved = FALSE;
  }
    
  commerce_payment_transaction_save($transaction);
    
  // If the payment failed, display an error.
  if (! $payment_approved) {
    drupal_set_message(t('We received the following error processing your card. Please enter you information again or try a different card.'), 'error');
    drupal_set_message(check_plain($mpgResponse->responseData['Message']), 'error');
    
    return FALSE;
  }
      
  return TRUE;
}
