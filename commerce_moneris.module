<?php
/**
 * @file
 * Provides moneris payment method for Drupal Commerce.
 */

define('COMMERCE_MONERIS_HPP_CANADA', 'ca');
define('COMMERCE_MONERIS_HPP_USA', 'us');

// CANADA
define('COMMERCE_MONERIS_HPP_PRODUCTION', 'https://www3.moneris.com/HPPDP/index.php');
define('COMMERCE_MONERIS_HPP_SANDBOX', 'https://esqa.moneris.com/HPPDP/index.php');

// US
define('COMMERCE_MONERIS_HPP_PRODUCTION_US', 'https://esplus.moneris.com/DPHPP/index.php');
define('COMMERCE_MONERIS_HPP_SANDBOX_US', 'https://esplusqa.moneris.com/DPHPP/index.php');

/**
 * Implements hook_permission().
 */
function commerce_moneris_permission() {
  return array(
    'administer moneris' => array(
      'title' => t('Administer Moneris'),
      'description' => t('Perform administrative actions with Moneris.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function commerce_moneris_menu() {
  $items = array();

  $items['admin/commerce/config/payment-methods/manage/commerce_payment_commerce_moneris'] = array(
    'title' => 'Moneris',
    'description' => 'Provides configuration options for the Moneris payment api.',
    'access arguments' => array('administer moneris'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_moneris_admin_settings'),
    'file' => 'commerce_moneris.admin.inc',
  );

  $items['commerce-moneris-hpp/callback'] = array(
    'title' => 'Moneris HPP Callback',
    'page callback' => 'commerce_moneris_hpp_callback_page',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_moneris_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_moneris'] = array(
    'title' => variable_get('commerce_moneris_title', 'Moneris'),
    'description' => t('Moneris Payment'),
    'active' => TRUE,
  );

  $payment_methods['commerce_moneris_hpp'] = array(
    'title' => variable_get('commerce_moneris_hpp_title', 'Moneris HPP'),
    'description' => t('Moneris Hosted Pay Page Payment'),
    'active' => TRUE,
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );

  return $payment_methods;
}

/**
 * Implements hook_commerce_order_status_info().
 */
function commerce_moneris_commerce_order_status_info() {
  $order_statuses = array();
  
  // Add Payment Verification Required
  $order_statuses['moneris_hpp_verification'] = array(
    'name' => 'moneris_hpp_verification',
    'title' => t('Payment Transaction Verification'),
    'description' => t('An error occurred while processing the payment for this order. Verify the payment transactions for this order, and make any corrections necessary before changing its status.'),
    'state' => 'pending',
    'weight' => 20,
  );

  return $order_statuses;
}

/**
 * Form used to collect Moneris data.
 *
 * @param Array $payment_method
 *   The payment method instance object used to charge this payment.
 * @param Array $pane_values
 *   The pane values.
 * @param Array $checkout_pane
 *   The checkout pane.
 * @param Object $order
 *   The order object the payment applies to.
 */
function commerce_moneris_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form = array();

  $form['moneris_credit_card']['number'] = array(
    '#type' => 'textfield',
    '#title' => t('Credit Card Number'),
    '#description' => t('Your credit card number.'),
    '#required' => TRUE,
  );

  $form['moneris_credit_card']['exp_month'] = array(
    '#type' => 'select',
    '#title' =>  t('Expiration Month'),
    '#options' => commerce_months(),
    '#required' => TRUE,
    '#description' => t('Your credit card expiration month.'),
  );

  $form['moneris_credit_card']['exp_year'] = array(
    '#type' => 'select',
    '#title' => t('Expiration Year'),
    '#options' => drupal_map_assoc(range(date('Y') - 2, date('Y') + 10)),
    '#required' => TRUE,
    '#description' => t('Your credit card expiration year.'),
  );

  $form['moneris_credit_card']['cvd_value'] = array(
    '#type' => 'textfield',
    '#title' => t('CVD'),
    '#required' => TRUE,
    '#description' => t('Last 3 or 4 digits on the back of your credit card.'),
  );

  return $form;
}

/**
 * Handles the form submit.
 *
 * @param Array $payment_method
 *   The payment method instance object used to charge this payment.
 * @param Array $pane_form
 *   The pane form.
 * @param Array $pane_values
 *   The pane values.
 * @param Object $order
 *   The order object the payment applies to.
 * @param Array $charge
 *   An array indicating the amount and currency code to charge.
 */
function commerce_moneris_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  $order->data['commerce_moneris'] = $pane_values;
  return commerce_moneris_transaction($payment_method, $order, $charge, $pane_values);
}

/**
 * Creates a moneris payment transaction. Post data to moneris.
 *
 * @param Array $payment_method
 *   The payment method instance object used to charge this payment.
 * @param Object $order
 *   The order object the payment applies to.
 * @param Array $charge
 *   An array indicating the amount and currency code to charge.
 * @param Array $values
 *   The vlaues submited by user.
 */
function commerce_moneris_transaction($payment_method, $order, $charge, $values) {
  $transaction                 = commerce_payment_transaction_new('commerce_moneris', $order->order_id);
  $transaction->instance_id    = $payment_method['instance_id'];
  $transaction->amount         = $charge['amount'];
  $transaction->currency_code  = $charge['currency_code'];

  // Get the configurations.
  $gateway     = variable_get('commerce_moneris_gateway', 'ca');
  $store_id    = variable_get('commerce_moneris_store_id', '');
  $api_token   = variable_get('commerce_moneris_apitoken', '');

  // Prepare data.
  $amount      = number_format($charge['amount'] / 100, 2, '.', '');
  $pan         = $order->data['commerce_moneris']['moneris_credit_card']['number'];
  $expiry_date = substr($order->data['commerce_moneris']['moneris_credit_card']['exp_year'], 2, 2);
  $expiry_date .= $order->data['commerce_moneris']['moneris_credit_card']['exp_month'];
  $cvd         = $order->data['commerce_moneris']['moneris_credit_card']['cvd_value'];
  $order_id    = 'order-' . $order->order_id . '-' . time();
  $cust_id     = 'customer-' . $order->uid;

  // Create transaction data.
  $purchase_type = $gateway == 'ca' ? 'purchase' : 'us_purchase';
  $txn_array = array(
    'type' => $purchase_type,
    'order_id' => $order_id,
    'cust_id' => $cust_id,
    'amount' => $amount,
    'pan' => $pan,
    'expdate' => $expiry_date,
    'crypt_type' => '7',
    'cvd_indicator' => 1,
    'cvd_value' => $cvd,
  );

  // Allow other modules to alter the txnArray.
  drupal_alter('commerce_moneris_txnarray', $txn_array, $order);

  $commerce_moneris = new CommerceMoneris($gateway, $store_id, $api_token);

  $production = variable_get('commerce_moneris_production', TRUE);
  $ssl = variable_get('commerce_moneris_ssl', FALSE);

  if ($ssl) {
    $cacert_path = variable_get('commerce_moneris_curl_certificate_path', '');
    $result = $commerce_moneris->post($purchase_type, $txn_array, $production, $ssl, $cacert_path);
  }
  else {
    $result = $commerce_moneris->post($purchase_type, $txn_array, $production);
  }

  // If the request failed, display an erorr and log it.
  if (isset($result['error_no'])) {
    watchdog('commerce_moneris', 'Error with cURL request: (!error_no). Message: !error_message',
      array(
        '!error_no' => $result['error_no'],
        '!error_message' => check_plain($result['error_message'])),
      WATCHDOG_ERROR
    );
    drupal_set_message(t('There was an error with your request. Please contact the site administrator.'), 'error');

    return FALSE;
  }

  // Get the response object.
  $commerce_moneris_response = $commerce_moneris->getCommerceMonerisResponse();
  $response_data = $commerce_moneris_response->getResponseData();

  watchdog('commerce_moneris', 'Moneris transaction response: !param',
            array('!param' => '<pre>' . check_plain(print_r($response_data, TRUE)) . '</pre>'));

  $transaction->message = 'Moneris ResponseCode: @responsecode <br />Moneris ResponseMessage: @message';
  $transaction->message_variables = array(
    '@responsecode' => $commerce_moneris_response->getResponseCode(),
    '@message' => $commerce_moneris_response->getMessage(),
  );

  // Set the RemoteID as Moneris TransID.
  $transaction->remote_id = $response_data['TransID'];

  $response_code = $commerce_moneris_response->getResponseCode();

  if ($response_code != "null") {
    $response_code = intval($response_code);
    if ((0 <= $response_code) && ($response_code <= 49)) {
      $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
      $payment_approved = TRUE;
    }
    else {
      $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
      $payment_approved = FALSE;
    }
  }
  else {
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
    $payment_approved = FALSE;
  }

  commerce_payment_transaction_save($transaction);

  // If the payment failed, display an error.
  if (!$payment_approved) {
    drupal_set_message(t('We were unable to process your payment. Please enter your information again or try a different card.'), 'error');

    if (variable_get('commerce_moneris_display_response', 1)) {
      drupal_set_message(check_plain($commerce_moneris_response->getMessage()), 'error');
    }

    return FALSE;
  }

  return TRUE;
}

/**
 * Moneris HPP settings form.
 */
function commerce_moneris_hpp_settings_form($settings = array()) {
  $form = array();
  $hpp = $settings['commerce_moneris_hpp'];

  $form['commerce_moneris_hpp']['commerce_moneris_hpp_gateway'] = array(
    '#type' => 'select',
    '#title' => t('Moneris Gateway'),
    '#options' => array(
      'ca' => t('Canada'),
      'us' => t('US'),
    ),
    '#default_value' => isset($hpp['commerce_moneris_hpp_gateway']) ? $hpp['commerce_moneris_hpp_gateway'] : '',
  );

  $form['commerce_moneris_hpp']['commerce_moneris_hpp_server'] = array(
    '#type' => 'radios',
    '#title' => t('Moneris Server'),
    '#options' => array(
        0 => t('Moneris Sandbox'),
        1 => t('Moneris Production'),
    ),
    '#default_value' => isset($hpp['commerce_moneris_hpp_server']) ? $hpp['commerce_moneris_hpp_server'] : 0,
  );

  $form['commerce_moneris_hpp']['commerce_moneris_hpp_ps_store_id'] = array(
    '#type' => 'textfield',
    '#title' => t('PS Store ID'),
    '#default_value' => isset($hpp['commerce_moneris_hpp_ps_store_id']) ? $hpp['commerce_moneris_hpp_ps_store_id'] : '',
    '#required' => TRUE,
  );

  $form['commerce_moneris_hpp']['commerce_moneris_hpp_key'] = array(
    '#type' => 'textfield',
    '#title' => t('HPP Key'),
    '#default_value' => isset($hpp['commerce_moneris_hpp_key']) ? $hpp['commerce_moneris_hpp_key'] : '',
    '#required' => TRUE,
  );

  $form['commerce_moneris_hpp']['commerce_moneris_hpp_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#default_value' => isset($hpp['commerce_moneris_hpp_title']) ? $hpp['commerce_moneris_hpp_title'] : t('Moneris HPP'),
    '#description' => t('Override the default title of the commerce moneris payment method.'),
  );

  return $form;
}

/**
 * Moneris HPP redirect form.
 */
function commerce_moneris_hpp_redirect_form($form, &$form_state, $order, $payment_method) {
  $form = array();

  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  $amount = $wrapper->commerce_order_total->amount->value();
  
  // Allow other modules to alter the payment method config.
  drupal_alter('commerce_moneris_hpp_settings', $payment_method['settings']['commerce_moneris_hpp']);
 
  $settings = $payment_method['settings']['commerce_moneris_hpp'];
  $gateway = $settings['commerce_moneris_hpp_gateway'];

  // Data that will be sent to Moneris HPP.
  // CANADA
  if ($gateway == COMMERCE_MONERIS_HPP_CANADA) {
    $data = array(
      // Mandatory Fields.
      'ps_store_id' => $settings['commerce_moneris_hpp_ps_store_id'],
      'hpp_key' => $settings['commerce_moneris_hpp_key'],
      'charge_total' => number_format($amount / 100, 2),
  
      // Optional fields.
      'cust_id' => $order->uid,
      'order_id' => commerce_moneris_hpp_invoice_id($order),
      'mail' => $order->mail,
    );
  }
  else {
    // US
    $data = array(
      // Mandatory Fields.
      'hpp_id' => $settings['commerce_moneris_hpp_ps_store_id'],
      'hpp_key' => $settings['commerce_moneris_hpp_key'],
      'amount' => number_format($amount / 100, 2),
  
      // Optional fields.
      'cust_id' => $order->uid,
      'order_no' => commerce_moneris_hpp_invoice_id($order),
      'client_email' => $order->mail,
    );
  }

  // Allow other modules to alter the $data.
  drupal_alter('commerce_moneris_hpp_data', $data);

  foreach ($data as $name => $value) {
    if (!empty($value)) {
      $form[$name] = array('#type' => 'hidden', '#value' => $value);
    }
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => $settings['commerce_moneris_hpp_title'],
  );

  $form['#action'] = commerce_moneris_hpp_server_url($settings);

  return $form;
}

/**
 * Returns a unique invoice number based on the Order ID and timestamp.
 */
function commerce_moneris_hpp_invoice_id($order) {
  return $order->order_id . '-' . REQUEST_TIME;
}

/**
 * Get the Moneris HPP server URL.
 */
function commerce_moneris_hpp_server_url($settings) {
  $server = $settings['commerce_moneris_hpp_server'];
  $gateway = $settings['commerce_moneris_hpp_gateway'];

  if ($gateway == COMMERCE_MONERIS_HPP_CANADA) {
    if ($server) {
      return COMMERCE_MONERIS_HPP_PRODUCTION;
    }
    return COMMERCE_MONERIS_HPP_SANDBOX;
  }
  else {
    if ($server) {
      return COMMERCE_MONERIS_HPP_PRODUCTION_US;
    }
    return COMMERCE_MONERIS_HPP_SANDBOX_US;
  }
}

/**
 * Callback page for Moneris HPP.
 */
function commerce_moneris_hpp_callback_page() {
  $payment_method = commerce_payment_method_instance_load('commerce_moneris_hpp|commerce_payment_commerce_moneris_hpp');
  $settings = $payment_method['settings']['commerce_moneris_hpp'];
  $gateway = $payment_method['settings']['commerce_moneris_hpp']['commerce_moneris_hpp_gateway'];

  if ($gateway == COMMERCE_MONERIS_HPP_CANADA) {
    if (!isset($_REQUEST['response_order_id'])) {
      drupal_not_found();
      return;
    }

    // Fields for CA Moneris.
    $order_id = isset($_REQUEST['response_order_id']) ? $_REQUEST['response_order_id'] : FALSE;
    $transaction_id = isset($_REQUEST['bank_transaction_id']) ? $_REQUEST['bank_transaction_id'] : FALSE;
    $amount = isset($_REQUEST['charge_total']) ? $_REQUEST['charge_total'] : 0;
    $response_code = isset($_REQUEST['response_code']) ? $_REQUEST['response_code'] : -1;
    $message = check_plain(isset($_REQUEST['message'])) ? check_plain($_REQUEST['message']) : FALSE;
    if (isset($_REQUEST['cancelTXN'])){    
      $cancel = isset($_REQUEST['cancelTXN']) && $_REQUEST['cancelTXN'] ? TRUE : FALSE;
    }

    // Test for "Enhanced Cancel" code 914
    elseif (intval($response_code) == 914 ) {
      $cancel = TRUE;
    }
    else {
      $cancel = FALSE;
    }
  }

  else {
    if (!isset($_REQUEST['order_no'])) {
      drupal_not_found();
      return;
    }

    // Fields for US Moneris.
    $order_id = $_REQUEST['order_no'];
    $transaction_id = $_REQUEST['ref_num'];
    $amount = $_REQUEST['amount'];
    $response_code = isset($_REQUEST['response_code']) ? $_REQUEST['response_code'] : -1;
    $message = check_plain(isset($_REQUEST['message'])) ? check_plain($_REQUEST['message']) : FALSE;
    $cancel = isset($_REQUEST['cancel']) && $_REQUEST['cancel'] ? TRUE : FALSE;
  }

  $order = commerce_order_load($order_id);
  if (! $order) {
    watchdog('commerce_moneris_hpp', t('Invalid order ID: ') . $order_id, WATCHDOG_ERROR);
    drupal_set_message(t('There was an error with your request. Please contact the site administrator.'), 'error');
  }

  // Load the order's current state.
  $order_status_load = commerce_order_status_load($order->status);
  $order_state = $order_status_load['state'];
  $order_status = $order->status;

  // Create a commerce payment transaction.
  $transaction = commerce_payment_transaction_new('commerce_moneris_hpp', $order->order_id);
  $transaction->remote_id = $transaction_id;
  $transaction->amount = $amount * 100;
  $transaction->message = 'Moneris ResponseCode: @responsecode <br />Moneris ResponseMessage: @message';
  $transaction->message_variables = array(
    '@responsecode' => $response_code,
    '@message' => print_r($_REQUEST, 1),
  );

  // Process the Transaction.  
  // Verify that the response code is not null.
  if ($response_code != "null") {

    // Verify the order was not cancelled.
    if (! $cancel) {
      $response_code = intval($response_code);

      // Verify that the response code indicates an approved payment.
      if ((0 <= $response_code) && ($response_code <= 49)) {
        $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
        $payment_approved = TRUE;
      }
      else {
        $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
        $payment_approved = FALSE;
      }
    }
    else {
      $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
      $payment_approved = FALSE;
    }
  }
  else {
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
    $payment_approved = FALSE;
  }

   // Save the payment transaction.
   commerce_payment_transaction_save($transaction);

  // Verify that the order is in the checkout_payment state.
  if ($order_status == 'checkout_payment'){
    if ($payment_approved) {
    // Complete the order.
    $order = commerce_order_status_update($order, 'completed');
    commerce_checkout_complete($order);
    drupal_goto('checkout/' . $order->order_id . '/complete');
    }
    else {
      if ($cancel) {
        drupal_set_message(t('Payment was canceled. Please try again.'), 'error');
      }

      // If the response code is null.
      elseif ($response_code == "null") {

        // Print an error message with message data generated by Moneris.
        drupal_set_message(t('There was an error processing your payment: ' . $message . '.<br />Please try again. If the problem persists please contact the site administrator.'), 'error');
      }
      else {

        // If the payment failed, display an error message.
        drupal_set_message(t('We were unable to process your payment. Please enter your information again or try a different card.'), 'error');
      }

      // Send the order back to the review page.
      $order = commerce_order_status_update($order, 'checkout_review');
      drupal_goto('checkout/' . $order->order_id . '/review');
    }
  }

  // If the order is in completed or pending state go to the complete page and print a message.
  elseif ($order_state == 'completed' || $order_state == 'pending' ) {

    // If the payment went through flag it for verification.
    if ($payment_approved){
      $order = commerce_order_status_update($order, 'moneris_hpp_verification'); 
    }  
    drupal_set_message(t('Payment for this order has already been submitted.'), 'status');
    drupal_goto('checkout/' . $order->order_id . '/complete');
  }

  // If the order is in any other state (such as shopping cart or canceled) return an error, and go to the homepage.
  else {

    // If the payment went through flag it for verification.
    if ($payment_approved){
      $order = commerce_order_status_update($order, 'moneris_hpp_verification'); 
    }
    drupal_set_message(t('An unknown error occurred while attempting to process your payment. Please try again. If the problem persists please contact the site administrator.'), 'error');
    drupal_goto('<front>');
  }
}
