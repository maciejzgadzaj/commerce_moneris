<?php

/**
 * @file
 * Provides moneris payment method for Drupal Commerce.
 */

define('COMMERCE_PAYMENT_STATUS_MONERIS_INITIATED', 'INITIATED');
define('COMMERCE_PAYMENT_STATUS_MONERIS_PREAUTH_ONLY', 'PREAUTH');

/**
 * Implements hook_commerce_payment_transaction_status_info().
 */
function commerce_moneris_commerce_payment_transaction_status_info() {
  $statuses = array();

  $statuses[COMMERCE_PAYMENT_STATUS_MONERIS_INITIATED] = array(
    'status' => COMMERCE_PAYMENT_STATUS_MONERIS_INITIATED,
    'title' => t('Initiated'),
    'icon' => drupal_get_path('module', 'commerce_payment') . '/theme/icon-pending.png',
    'total' => FALSE,
  );

  $statuses[COMMERCE_PAYMENT_STATUS_MONERIS_PREAUTH_ONLY] = array(
    'status' => COMMERCE_PAYMENT_STATUS_MONERIS_PREAUTH_ONLY,
    'title' => t('Pre-authorized'),
    'icon' => drupal_get_path('module', 'commerce_payment') . '/theme/icon-success.png',
    'total' => FALSE,
  );

  return $statuses;
}

/**
 * Implements hook_permission().
 */
function commerce_moneris_permission() {
  return array(
    'administer moneris' => array(
      'title' => t('Administer Moneris'),
      'description' => t('Perform administrative actions with Moneris.'),
    ),
  );
}

/**
 * Returns available Moneris environments.
 *
 * @param bool $translated
 *   A boolean indicating whether returned strings should be translated or not.
 *
 * @return array
 *   An array of available Moneris environments.
 */
function commerce_moneris_environments($translated = FALSE) {
  $environments = array(
    'test' => 'Test',
    'prod' => 'Production',
  );

  if ($translated) {
    $environments = array_map('t', $environments);
  }

  return $environments;
}

/**
 * Returns available Moneris gateways (countries).
 *
 * @param bool $translated
 *   A boolean indicating whether returned strings should be translated or not.
 *
 * @return array
 *   An array of available Moneris gateways (countries).
 */
function commerce_moneris_gateways($translated = FALSE) {
  $gateways = array(
    'ca' => t('Canada'),
    'us' => t('US'),
  );

  if ($translated) {
    $gateways = array_map('t', $gateways);
  }

  return $gateways;
}

/**
 * Returns supported transaction types for a specified gateway (country).
 *
 * @param string $gateway_id
 *   A gateway ID indicating which country to return transaction types for.
 * @param bool $translated
 *   A boolean indicating whether returned strings should be translated or not.
 *
 * @return array
 *   An array of available transaction types for a specified gateway (country).
 */
function commerce_moneris_transaction_types($gateway_id, $translated = FALSE) {
  $transaction_types = array(
    'ca' => array(
      'purchase' => t('Purchase'),
//      'preauth' => t('PreAuth'),
    ),
    'us' => array(
      'us_purchase' => t('Purchase'),
//      'us_preauth' => t('PreAuth'),
    ),
  );

  if ($translated) {
    $transaction_types[$gateway_id] = array_map('t', $transaction_types[$gateway_id]);
  }

  return $transaction_types[$gateway_id];
}
