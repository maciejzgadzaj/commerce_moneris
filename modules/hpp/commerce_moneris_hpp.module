<?php
/**
 * @file
 * Provides integration with Moneris Hosted Pay Page payment method (off-site).
 */

define('COMMERCE_MONERIS_HPP_CANADA', 'ca');
define('COMMERCE_MONERIS_HPP_USA', 'us');

// CANADA
define('COMMERCE_MONERIS_HPP_PRODUCTION', 'https://www3.moneris.com/HPPDP/index.php');
define('COMMERCE_MONERIS_HPP_SANDBOX', 'https://esqa.moneris.com/HPPDP/index.php');

// US
define('COMMERCE_MONERIS_HPP_PRODUCTION_US', 'https://esplus.moneris.com/DPHPP/index.php');
define('COMMERCE_MONERIS_HPP_SANDBOX_US', 'https://esplusqa.moneris.com/DPHPP/index.php');

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_moneris_hpp_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_moneris_hpp'] = array(
    'title' => 'Moneris HPP',
    'display_title' => 'Moneris',
    'description' => t('Moneris Hosted Pay Page payment method (off-site)'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );

  return $payment_methods;
}

/**
 * Implements hook_commerce_order_status_info().
 */
function commerce_moneris_hpp_commerce_order_status_info() {
  $order_statuses = array();

  // Add Payment Verification Required
  $order_statuses['moneris_hpp_verification'] = array(
    'name' => 'moneris_hpp_verification',
    'title' => t('Payment Transaction Verification'),
    'description' => t('An error occurred while processing the payment for this order. Verify the payment transactions for this order, and make any corrections necessary before changing its status.'),
    'state' => 'pending',
    'weight' => 20,
  );

  return $order_statuses;
}

/**
 * Implements hook_menu().
 */
function commerce_moneris_hpp_menu() {
  $items = array();

  $items['commerce-moneris-hpp/callback'] = array(
    'title' => 'Moneris HPP Callback',
    'page callback' => 'commerce_moneris_hpp_callback_page',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Payment method callback: settings form.
 */
function commerce_moneris_hpp_settings_form($settings = array()) {
  // Merge default settings into the stored settings array.
  // Settings are stored in multi-level array, so we need recursive merge. And
  // actually replace instead of merge, to make sure the default settings are
  // correctly overriden by custom user settings (array_merge_recursive() would
  // just add new array elements instead of overriding existing ones).
  $settings = array_replace_recursive(commerce_moneris_hpp_settings_default(), $settings);

  $form = array();

  $form['gateway'] = array(
    '#type' => 'select',
    '#title' => t('Gateway'),
    '#options' => commerce_moneris_gateways(TRUE),
    '#default_value' => $settings['gateway'],
  );

  $form['server'] = array(
    '#type' => 'radios',
    '#title' => t('Environment'),
    '#options' => commerce_moneris_environments(TRUE),
    '#default_value' => $settings['server'],
  );

  // Collect Moneris Store ID and HPP Key for each available environment.
  foreach (commerce_moneris_gateways() as $gateway_id => $gateway) {
    foreach (commerce_moneris_environments() as $environment_id => $environment) {

      $form[$gateway_id][$environment_id]['store_id'] = array(
        '#type' => 'textfield',
        '#title' => t('@gateway @environemnt Store ID', array(
          '@gateway' => $gateway,
          '@environemnt' => $environment,
        )),
        '#default_value' => $settings[$gateway_id][$environment_id]['store_id'],
        '#states' => array(
          'visible' => array(
            ':input[name="parameter[payment_method][settings][payment_method][settings][gateway]"]' => array('value' => $gateway_id),
            ':input[name="parameter[payment_method][settings][payment_method][settings][server]"]' => array('value' => $environment_id),
          ),
          'required' => array(
            ':input[name="parameter[payment_method][settings][payment_method][settings][gateway]"]' => array('value' => $gateway_id),
            ':input[name="parameter[payment_method][settings][payment_method][settings][server]"]' => array('value' => $environment_id),
          ),
        ),
      );

      $form[$gateway_id][$environment_id]['hpp_key'] = array(
        '#type' => 'textfield',
        '#title' => t('@gateway @env HPP Key', array(
          '@gateway' => $gateway,
          '@env' => $environment,
        )),
        '#default_value' => $settings[$gateway_id][$environment_id]['hpp_key'],
        '#states' => array(
          'visible' => array(
            ':input[name="parameter[payment_method][settings][payment_method][settings][gateway]"]' => array('value' => $gateway_id),
            ':input[name="parameter[payment_method][settings][payment_method][settings][server]"]' => array('value' => $environment_id),
          ),
          'required' => array(
            ':input[name="parameter[payment_method][settings][payment_method][settings][gateway]"]' => array('value' => $gateway_id),
            ':input[name="parameter[payment_method][settings][payment_method][settings][server]"]' => array('value' => $environment_id),
          ),
        ),
      );

    }

    $form[$gateway_id]['txn_type'] = array(
      '#type' => 'radios',
      '#title' => t('Default @gateway credit card transaction type', array('@gateway' => $gateway)),
      '#options' => commerce_moneris_transaction_types($gateway_id),
      '#default_value' => $settings[$gateway_id]['txn_type'],
      '#states' => array(
        'visible' => array(
          ':input[name="parameter[payment_method][settings][payment_method][settings][gateway]"]' => array('value' => $gateway_id),
        ),
        'required' => array(
          ':input[name="parameter[payment_method][settings][payment_method][settings][gateway]"]' => array('value' => $gateway_id),
        ),
      ),
    );

  }

  $form['log'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Log the following messages for debugging'),
    '#options' => array(
      'request' => t('API request messages'),
      'response' => t('API response messages'),
    ),
    '#default_value' => $settings['log'],
  );

  return $form;
}

/**
 * Returns default settings for the Moneris HPP payment method.
 *
 * @see commerce_moneris_hpp_settings_form()
 */
function commerce_moneris_hpp_settings_default() {
  $default_settings = array(
    'gateway' => 'us',
    'server' => 'test',
    'log' => array(),
  );
  foreach (commerce_moneris_gateways() as $gateway_id => $gateway) {
    foreach (commerce_moneris_environments() as $environment_id => $environment) {
      $default_settings[$gateway_id][$environment_id]['store_id'] = '';
      $default_settings[$gateway_id][$environment_id]['hpp_key'] = '';
    }
    // For default transaction type we return key of the first defined type.
    $transaction_types = commerce_moneris_transaction_types($gateway_id);
    reset($transaction_types);
    $default_settings[$gateway_id]['txn_type'] = key($transaction_types);
  }
  return $default_settings;
}

/**
 * Callback page for Moneris HPP.
 */
function commerce_moneris_hpp_callback_page() {
  $payment_method = commerce_payment_method_instance_load('commerce_moneris_hpp|commerce_payment_commerce_moneris_hpp');
  $gateway = $payment_method['settings']['gateway'];

  $language = isset($_SESSION['client_data']['language']) ? $_SESSION['client_data']['language'] : language_default('language');

  if ($gateway == COMMERCE_MONERIS_HPP_CANADA) {
    if (!isset($_REQUEST['response_order_id'])) {
      drupal_not_found();
      return;
    }

    // Fields for CA Moneris.
    $order_id = isset($_REQUEST['response_order_id']) ? $_REQUEST['response_order_id'] : FALSE;
    $transaction_id = isset($_REQUEST['bank_transaction_id']) ? $_REQUEST['bank_transaction_id'] : FALSE;
    $amount = isset($_REQUEST['charge_total']) ? $_REQUEST['charge_total'] : 0;
    $response_code = isset($_REQUEST['response_code']) ? $_REQUEST['response_code'] : -1;
    $message = check_plain(isset($_REQUEST['message'])) ? check_plain($_REQUEST['message']) : FALSE;
    if (isset($_REQUEST['cancelTXN'])){
      $cancel = isset($_REQUEST['cancelTXN']) && $_REQUEST['cancelTXN'] ? TRUE : FALSE;
    }

    // Test for "Enhanced Cancel" code 914
    elseif (intval($response_code) == 914 ) {
      $cancel = TRUE;
    }
    else {
      $cancel = FALSE;
    }
  }

  else {
    if (!isset($_REQUEST['order_no'])) {
      drupal_not_found();
      return;
    }

    // Fields for US Moneris.
    $order_id = $_REQUEST['order_no'];
    $transaction_id = $_REQUEST['ref_num'];
    $amount = $_REQUEST['amount'];
    $response_code = isset($_REQUEST['response_code']) ? $_REQUEST['response_code'] : -1;
    $message = check_plain(isset($_REQUEST['message'])) ? check_plain($_REQUEST['message']) : FALSE;
    $cancel = isset($_REQUEST['cancel']) && $_REQUEST['cancel'] ? TRUE : FALSE;
  }

  $order = commerce_order_load($order_id);
  if (! $order) {
    watchdog('commerce_moneris_hpp', t('Invalid order ID: ') . $order_id, WATCHDOG_ERROR);
    drupal_set_message(t('There was an error with your request. Please contact the site administrator.'), 'error',  array('langcode' => $language));
  }

  // Load the order's current state.
  $order_status_load = commerce_order_status_load($order->status);
  $order_state = $order_status_load['state'];
  $order_status = $order->status;

  // Create a commerce payment transaction.
  $transaction = commerce_payment_transaction_new('commerce_moneris_hpp', $order->order_id);
  $transaction->remote_id = $transaction_id;
  $transaction->amount = $amount * 100;
  $transaction->message = 'Moneris ResponseCode: @responsecode <br />Moneris ResponseMessage: @message';
  $transaction->message_variables = array(
    '@responsecode' => $response_code,
    '@message' => print_r($_REQUEST, 1),
  );

  // Process the Transaction.
  // Verify that the response code is not null.
  if ($response_code != "null") {

    // Verify the order was not cancelled.
    if (! $cancel) {
      $response_code = intval($response_code);

      // Verify that the response code indicates an approved payment.
      if ((0 <= $response_code) && ($response_code <= 49)) {
        $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
        $payment_approved = TRUE;
      }
      else {
        $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
        $payment_approved = FALSE;
      }
    }
    else {
      $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
      $payment_approved = FALSE;
    }
  }
  else {
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
    $payment_approved = FALSE;
  }

  // Save the payment transaction.
  commerce_payment_transaction_save($transaction);

  // Verify that the order is in the checkout_payment state.
  if ($order_status == 'checkout_payment'){
    if ($payment_approved) {
      // Complete the order.
      $order = commerce_order_status_update($order, 'completed');
      commerce_checkout_complete($order);
      drupal_goto('checkout/' . $order->order_id . '/complete');
    }
    else {
      if ($cancel) {
        drupal_set_message(t('Payment was canceled. Please try again.'), 'error',  array('langcode' => $language));
      }

      // If the response code is null.
      elseif ($response_code == "null") {

        // Print an error message with message data generated by Moneris.
        drupal_set_message(t('There was an error processing your payment: ' . $message . '.<br />Please try again. If the problem persists please contact the site administrator.'), 'error', array('langcode' => $language));
      }
      else {

        // If the payment failed, display an error message.
        drupal_set_message(t('We were unable to process your payment. Please enter your information again or try a different card.'), 'error', array('langcode' => $language));
      }

      // Send the order back to the review page.
      $order = commerce_order_status_update($order, 'checkout_review');
      drupal_goto('checkout/' . $order->order_id . '/review');
    }
  }

  // If the order is in completed or pending state go to the complete page and print a message.
  elseif ($order_state == 'completed' || $order_state == 'pending' ) {

    // If the payment went through flag it for verification.
    if ($payment_approved){
      $order = commerce_order_status_update($order, 'moneris_hpp_verification');
    }
    drupal_set_message(t('Payment for this order has already been submitted.'), 'status');
    drupal_goto('checkout/' . $order->order_id . '/complete');
  }

  // If the order is in any other state (such as shopping cart or canceled) return an error, and go to the homepage.
  else {

    // If the payment went through flag it for verification.
    if ($payment_approved){
      $order = commerce_order_status_update($order, 'moneris_hpp_verification');
    }
    drupal_set_message(t('An unknown error occurred while attempting to process your payment. Please try again. If the problem persists please contact the site administrator.'), 'error', array('langcode' => $language));
    drupal_goto('<front>');
  }
}

/**
 * Moneris HPP redirect form.
 */
function commerce_moneris_hpp_redirect_form($form, &$form_state, $order, $payment_method) {
  $form = array();

  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  $amount = $wrapper->commerce_order_total->amount->value();

  $settings = $payment_method['settings']['commerce_moneris_hpp'];
  $gateway = $settings['commerce_moneris_hpp_gateway'];

  // Data that will be sent to Moneris HPP.
  // CANADA
  if ($gateway == COMMERCE_MONERIS_HPP_CANADA) {
    $data = array(
      // Mandatory Fields.
      'ps_store_id' => $settings['commerce_moneris_hpp_ps_store_id'],
      'hpp_key' => $settings['commerce_moneris_hpp_key'],
      'charge_total' => number_format($amount / 100, 2),

      // Optional fields.
      'cust_id' => $order->uid,
      'order_id' => commerce_moneris_hpp_invoice_id($order),
      'mail' => $order->mail,
    );
  }
  else {
    // US
    $data = array(
      // Mandatory Fields.
      'hpp_id' => $settings['commerce_moneris_hpp_ps_store_id'],
      'hpp_key' => $settings['commerce_moneris_hpp_key'],
      'amount' => number_format($amount / 100, 2),

      // Optional fields.
      'cust_id' => $order->uid,
      'order_no' => commerce_moneris_hpp_invoice_id($order),
      'client_email' => $order->mail,
    );
  }

  // Allow other modules to alter the $data.
  drupal_alter('commerce_moneris_hpp_data', $data);

  foreach ($data as $name => $value) {
    if (!empty($value)) {
      $form[$name] = array('#type' => 'hidden', '#value' => $value);
    }
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => $settings['commerce_moneris_hpp_title'],
  );

  $form['#action'] = commerce_moneris_hpp_server_url($settings);

  return $form;
}

/**
 * Returns a unique invoice number based on the Order ID and timestamp.
 */
function commerce_moneris_hpp_invoice_id($order) {
  return $order->order_id . '-' . REQUEST_TIME;
}

/**
 * Get the Moneris HPP server URL.
 */
function commerce_moneris_hpp_server_url($settings) {
  $server = $settings['commerce_moneris_hpp_server'];
  $gateway = $settings['commerce_moneris_hpp_gateway'];

  if ($gateway == COMMERCE_MONERIS_HPP_CANADA) {
    if ($server) {
      return COMMERCE_MONERIS_HPP_PRODUCTION;
    }
    return COMMERCE_MONERIS_HPP_SANDBOX;
  }
  else {
    if ($server) {
      return COMMERCE_MONERIS_HPP_PRODUCTION_US;
    }
    return COMMERCE_MONERIS_HPP_SANDBOX_US;
  }
}
